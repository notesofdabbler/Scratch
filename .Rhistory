yscale = 2
g$x$nodes$x = c(-1, -0.3, 0.3, 1) * xscale
g$x$nodes$y = c(0, 0, 0, 0) * yscale
g$x$igraphlayout = "tree_layout"
g %>% visNodes(physics = FALSE) %>%
visEdges(smooth = FALSE) %>% visPhysics(stabilization = FALSE)
nodes = data.frame(id = c(1, 2, 3, 4))
nodes$label = paste0("node_", nodes$id)
nodes$x = c(100, 200, 300, 400)
nodes$y = c(100, 100, 100, 100)
g = visNetwork(nodes, edges = NULL)
g %>% visNodes(physics = FALSE) %>%
visEdges(smooth = FALSE) %>% visPhysics(stabilization = FALSE)
nodes = data.frame(id = c(1, 2, 3, 4))
edges = data.frame(from = c(1, 2, 3), to = c(2, 3, 4))
edges$arrows = "to"
# directly specify x and y columns in nodes dataframe (the magnitude looks like pixel
# coordinates)
nodes$x = c(100, 200, 300, 400)
nodes$y = c(100, 100, 100, 100)
g = visNetwork(nodes, edges = NULL)
g %>% visNodes(physics = FALSE) %>%
visEdges(smooth = FALSE) %>% visPhysics(stabilization = FALSE)
nodes = data.frame(id = c(1, 2, 3, 4))
nodes$label = paste0("node_", nodes$id)
edges = data.frame(from = c(1, 2, 3), to = c(2, 3, 4))
edges$arrows = "to"
# directly specify x and y columns in nodes dataframe (the magnitude looks like pixel
# coordinates)
nodes$x = c(100, 200, 300, 400)
nodes$y = c(100, 100, 100, 100)
g = visNetwork(nodes, edges)
g %>% visNodes(physics = FALSE) %>%
visEdges(smooth = FALSE) %>% visPhysics(stabilization = FALSE)
nodes = data.frame(id = c(1, 2, 3, 4))
nodes$label = paste0("node_", nodes$id)
edges = data.frame(from = c(1, 2, 3), to = c(2, 3, 4))
edges$arrows = "to"
# directly specify x and y columns in nodes dataframe (the magnitude looks like pixel
# coordinates)
nodes$x = c(100, 200, 300, 400)
nodes$y = c(100, 300, 0, 500)
g = visNetwork(nodes, edges)
g %>% visNodes(physics = FALSE) %>%
visEdges(smooth = FALSE) %>% visPhysics(stabilization = FALSE)
nodes = data.frame(id = c(1, 2, 3, 4))
nodes$label = paste0("node_", nodes$id)
edges = data.frame(from = c(1, 2, 3), to = c(2, 3, 4))
edges$arrows = "to"
g = visNetwork(nodes, edges = NULL)
# coordinates - negative is top left, positive is bottom right on screen
# code below based on
# https://github.com/datastorm-open/visNetwork/blob/master/R/visIgraphLayout.R
# which works with g$x$nodes and x,y coordinates are in the
# box (-xscale, -yscale) to (xscale, yscale) and sets layout as tree_layout
xscale = 2
yscale = 2
g$x$nodes$x = c(-1, -0.3, 0.3, 1) * xscale
g$x$nodes$y = c(0, 1, -1, 2) * yscale
g$x$igraphlayout = "tree_layout"
g %>% visNodes(physics = FALSE) %>%
visEdges(smooth = FALSE) %>% visPhysics(stabilization = FALSE)
nodes = data.frame(id = c(1, 2, 3, 4))
nodes$label = paste0("node_", nodes$id)
edges = data.frame(from = c(1, 2, 3), to = c(2, 3, 4))
edges$arrows = "to"
g = visNetwork(nodes, edges)
# coordinates - negative is top left, positive is bottom right on screen
# code below based on
# https://github.com/datastorm-open/visNetwork/blob/master/R/visIgraphLayout.R
# which works with g$x$nodes and x,y coordinates are in the
# box (-xscale, -yscale) to (xscale, yscale) and sets layout as tree_layout
xscale = 2
yscale = 2
g$x$nodes$x = c(-1, -0.3, 0.3, 1) * xscale
g$x$nodes$y = c(0, 1, -1, 2) * yscale
g$x$igraphlayout = "tree_layout"
g %>% visNodes(physics = FALSE) %>%
visEdges(smooth = FALSE) %>% visPhysics(stabilization = FALSE)
library(igraph)
tree <- make_tree(20, 3)
plot(tree, layout=layout_as_tree)
?make_tree
?layout_as_tree
library(igraph)
tree <- make_tree(20, 3)
plot(tree, layout=layout_as_tree)
plot(tree, layout=layout_as_tree(flip.y = TRUE))
library(igraph)
tree <- make_tree(20, 3)
plot(tree, layout=layout_as_tree)
plot(tree, layout=layout_as_tree, flip.y = TRUE)
library(igraph)
tree <- make_tree(20, 3)
plot(tree, layout=layout_as_tree)
plot(tree, layout=layout_as_tree(tree, flip.y = TRUE))
plot(tree, layout=layout_as_tree(tree, flip.y = FALSE))
get.edgelist(tree)
edges = as.data.frame(get.edgelist(tree))
edges
edges = as.data.frame(get.edgelist(tree))
names(edges) = c("from", "to")
nodes = data.frame(id = as.numeric(names(V(tree))))
nodes$label = id
edges = as.data.frame(get.edgelist(tree))
names(edges) = c("from", "to")
nodes = data.frame(id = as.numeric(names(V(tree))))
nodes$label = nodes$id
coord = layout(tree, layout_as_tree)
tree
layout_as_tree(tree)
coord = layout_as_tree(tree)
g = visNetwork(nodes, edges)
xcoord = coord[,1]
ycoord = coord[,2]
to <- c(-1, 1)
from <- range(xcoord, na.rm = TRUE, finite = TRUE)
xcoord_scaled <- (xcoord - from[1])/diff(from) * diff(to) + to[1]
to <- c(-1, 1)
from <- range(ycoord, na.rm = TRUE, finite = TRUE)
ycoord_scaled <- (ycoord - from[1])/diff(from) * diff(to) + to[1]
g$x$nodes$x = xcoord_scaled
coord = layout_as_tree(tree)
g = visNetwork(nodes, edges)
xcoord = coord[,1]
ycoord = coord[,2]
to <- c(-1, 1)
from <- range(xcoord, na.rm = TRUE, finite = TRUE)
xcoord_scaled <- (xcoord - from[1])/diff(from) * diff(to) + to[1]
to <- c(-1, 1)
from <- range(ycoord, na.rm = TRUE, finite = TRUE)
ycoord_scaled <- (ycoord - from[1])/diff(from) * diff(to) + to[1]
g$x$nodes$x = xcoord_scaled
nodes
edges = as.data.frame(get.edgelist(tree))
names(edges) = c("from", "to")
nodes = data.frame(id = as.numeric(names(V(tree))))
nodes$label = nodes$id
coord = layout_as_tree(tree)
g = visNetwork(nodes, edges)
xcoord = coord[,1]
ycoord = coord[,2]
to <- c(-1, 1)
from <- range(xcoord, na.rm = TRUE, finite = TRUE)
xcoord_scaled <- (xcoord - from[1])/diff(from) * diff(to) + to[1]
to <- c(-1, 1)
from <- range(ycoord, na.rm = TRUE, finite = TRUE)
ycoord_scaled <- (ycoord - from[1])/diff(from) * diff(to) + to[1]
g$x$nodes$x = xcoord_scaled
nodes
tree
V(tree)
edges
edges = as.data.frame(get.edgelist(tree))
names(edges) = c("from", "to")
nodes = data.frame(id = as.numeric(names(V(tree))))
nodes$label = nodes$id
nodes
names(V(tree))
edges = as.data.frame(get.edgelist(tree))
names(edges) = c("from", "to")
nodes = data.frame(id = as.numeric(V(tree)))
nodes$label = nodes$id
nodes
coord = layout_as_tree(tree)
g = visNetwork(nodes, edges)
xcoord = coord[,1]
ycoord = coord[,2]
to <- c(-1, 1)
from <- range(xcoord, na.rm = TRUE, finite = TRUE)
xcoord_scaled <- (xcoord - from[1])/diff(from) * diff(to) + to[1]
to <- c(-1, 1)
from <- range(ycoord, na.rm = TRUE, finite = TRUE)
ycoord_scaled <- (ycoord - from[1])/diff(from) * diff(to) + to[1]
g$x$nodes$x = xcoord_scaled
g$x$nodes$y = ycoord_scaled
g$x$igraphlayout <- "layout_as_tree"
g %>% visNodes(physics = physics) %>%
visEdges(smooth = smooth) %>% visPhysics(stabilization = FALSE)
coord = layout_as_tree(tree)
g = visNetwork(nodes, edges)
xcoord = coord[,1]
ycoord = coord[,2]
to <- c(-1, 1)
from <- range(xcoord, na.rm = TRUE, finite = TRUE)
xcoord_scaled <- (xcoord - from[1])/diff(from) * diff(to) + to[1]
to <- c(-1, 1)
from <- range(ycoord, na.rm = TRUE, finite = TRUE)
ycoord_scaled <- (ycoord - from[1])/diff(from) * diff(to) + to[1]
g$x$nodes$x = xcoord_scaled
g$x$nodes$y = ycoord_scaled
g$x$igraphlayout <- "layout_as_tree"
g %>% visNodes(physics = FALSE) %>%
visEdges(smooth = FALSE) %>% visPhysics(stabilization = FALSE)
g$x$nodes$x = ycoord_scaled
g$x$nodes$y = xcoord_scaled
g$x$igraphlayout <- "layout_as_tree"
g %>% visNodes(physics = FALSE) %>%
visEdges(smooth = FALSE) %>% visPhysics(stabilization = FALSE)
coord = layout_as_tree(tree, flip.y = FALSE)
g = visNetwork(nodes, edges)
xcoord = coord[,1]
ycoord = coord[,2]
to <- c(-1, 1)
from <- range(xcoord, na.rm = TRUE, finite = TRUE)
xcoord_scaled <- (xcoord - from[1])/diff(from) * diff(to) + to[1]
to <- c(-1, 1)
from <- range(ycoord, na.rm = TRUE, finite = TRUE)
ycoord_scaled <- (ycoord - from[1])/diff(from) * diff(to) + to[1]
g$x$nodes$x = xcoord_scaled
g$x$nodes$y = ycoord_scaled
g$x$igraphlayout <- "layout_as_tree"
g %>% visNodes(physics = FALSE) %>%
visEdges(smooth = FALSE) %>% visPhysics(stabilization = FALSE)
g$x$nodes$x = ycoord_scaled
g$x$nodes$y = xcoord_scaled
g$x$igraphlayout <- "layout_as_tree"
g %>% visNodes(physics = FALSE) %>%
visEdges(smooth = FALSE) %>% visPhysics(stabilization = FALSE)
library(igraph)
edgesM = matrix(c(1,2,1,3,2,3,2,4,3,5,4,6,5,6), ncol = 2, byrow = TRUE)
g = graph_from_edgelist(edgesM)
plot(g, layout_as_tree)
g
V(g)
E(g)
plot(g)
plot(g, layout_as_tree)
plot(g, layout = layout_as_tree)
plot(g, layout=layout_as_tree(tree, flip.y = FALSE))
plot(g, layout=layout_as_tree(g, flip.y = FALSE))
# get nodes and edges dataframe of graph g
edges = as.data.frame(get.edgelist(g))
names(edges) = c("from", "to")
edges$arrows = "to"
nodes = data.frame(id = as.numeric(V(g)))
nodes$label = nodes$id
# adapted from
# https://github.com/datastorm-open/visNetwork/blob/master/R/visIgraphLayout.R
coord = layout_as_tree(g, flip.y = FALSE)
g = visNetwork(nodes, edges)
xcoord = coord[,1]
ycoord = coord[,2]
to <- c(-1, 1)
from <- range(xcoord, na.rm = TRUE, finite = TRUE)
xcoord_scaled <- (xcoord - from[1])/diff(from) * diff(to) + to[1]
to <- c(-1, 1)
from <- range(ycoord, na.rm = TRUE, finite = TRUE)
ycoord_scaled <- (ycoord - from[1])/diff(from) * diff(to) + to[1]
g$x$nodes$x = xcoord_scaled
g$x$nodes$y = ycoord_scaled
g$x$igraphlayout <- "layout_as_tree"
g %>% visNodes(physics = FALSE) %>%
visEdges(smooth = FALSE) %>% visPhysics(stabilization = FALSE)
# adapted from
# https://github.com/datastorm-open/visNetwork/blob/master/R/visIgraphLayout.R
coord = layout_as_tree(g, flip.y = FALSE)
g = visNetwork(nodes, edges)
# flip the x and y coordinates of igraph output to make the graph horizontal
xcoord = coord[,2]
ycoord = coord[,1]
to <- c(-1, 1)
from <- range(xcoord, na.rm = TRUE, finite = TRUE)
xcoord_scaled <- (xcoord - from[1])/diff(from) * diff(to) + to[1]
to <- c(-1, 1)
from <- range(ycoord, na.rm = TRUE, finite = TRUE)
ycoord_scaled <- (ycoord - from[1])/diff(from) * diff(to) + to[1]
g$x$nodes$x = xcoord_scaled
g$x$nodes$y = ycoord_scaled
g$x$igraphlayout <- "layout_as_tree"
g %>% visNodes(physics = FALSE) %>%
visEdges(smooth = FALSE) %>% visPhysics(stabilization = FALSE)
# adapted from
# https://github.com/datastorm-open/visNetwork/blob/master/R/visIgraphLayout.R
coord = layout_as_tree(g, flip.y = FALSE)
g = visNetwork(nodes, edges)
# use igraph coordinates for x and manual coordinates for y
xcoord = coord[,2]
ycoord = c(1, 2, 0, 3, -1, 4)
to <- c(-1, 1)
from <- range(xcoord, na.rm = TRUE, finite = TRUE)
xcoord_scaled <- (xcoord - from[1])/diff(from) * diff(to) + to[1]
to <- c(-1, 1)
from <- range(ycoord, na.rm = TRUE, finite = TRUE)
ycoord_scaled <- (ycoord - from[1])/diff(from) * diff(to) + to[1]
g$x$nodes$x = xcoord_scaled
g$x$nodes$y = ycoord_scaled
g$x$igraphlayout <- "layout_as_tree"
g %>% visNodes(physics = FALSE) %>%
visEdges(smooth = FALSE) %>% visPhysics(stabilization = FALSE)
library(igraph)
edgesM = matrix(c(1,2,1,3,2,3,2,4,3,5,4,6,5,6), ncol = 2, byrow = TRUE)
g = graph_from_edgelist(edgesM)
plot(g, layout = layout_as_tree)
plot(g, layout=layout_as_tree(g, flip.y = FALSE))
# get nodes and edges dataframe of graph g
edges = as.data.frame(get.edgelist(g))
names(edges) = c("from", "to")
edges$arrows = "to"
nodes = data.frame(id = as.numeric(V(g)))
nodes$label = nodes$id
# adapted from
# https://github.com/datastorm-open/visNetwork/blob/master/R/visIgraphLayout.R
coord = layout_as_tree(g, flip.y = FALSE)
g = visNetwork(nodes, edges)
# flip the x and y coordinates of igraph output to make the graph horizontal
xcoord = coord[,2]
ycoord = coord[,1]
to <- c(-1, 1)
from <- range(xcoord, na.rm = TRUE, finite = TRUE)
xcoord_scaled <- (xcoord - from[1])/diff(from) * diff(to) + to[1]
to <- c(-1, 1)
from <- range(ycoord, na.rm = TRUE, finite = TRUE)
ycoord_scaled <- (ycoord - from[1])/diff(from) * diff(to) + to[1]
g$x$nodes$x = xcoord_scaled
g$x$nodes$y = ycoord_scaled
g$x$igraphlayout <- "layout_as_tree"
g %>% visNodes(physics = FALSE) %>%
visEdges(smooth = FALSE) %>% visPhysics(stabilization = FALSE)
# adapted from
# https://github.com/datastorm-open/visNetwork/blob/master/R/visIgraphLayout.R
coord = layout_as_tree(g, flip.y = FALSE)
g = visNetwork(nodes, edges)
# use igraph coordinates for x and manual coordinates for y
xcoord = coord[,2]
ycoord = c(1, 2, 0, 3, -1, 4)
to <- c(-1, 1)
from <- range(xcoord, na.rm = TRUE, finite = TRUE)
xcoord_scaled <- (xcoord - from[1])/diff(from) * diff(to) + to[1]
to <- c(-1, 1)
from <- range(ycoord, na.rm = TRUE, finite = TRUE)
ycoord_scaled <- (ycoord - from[1])/diff(from) * diff(to) + to[1]
g$x$nodes$x = xcoord_scaled
g$x$nodes$y = ycoord_scaled
g$x$igraphlayout <- "layout_as_tree"
g %>% visNodes(physics = FALSE) %>%
visEdges(smooth = FALSE) %>% visPhysics(stabilization = FALSE)
sessionInfo()
tmp = 'sidebarPanel(
selectInput("id1","ID 1", choices = c("a", "b"), selected = "a"),
numericInput("id2", "ID 2", value = 2),
selectInput("id3", "ID 3", choices = c("x", "y"), selected = "x")
)'
tmp
grepl("selectInput(")
grepl("selectInput(",tmp)
grepl("selectInput\\(",tmp)
grep("selectInput\\(",tmp)
library(stringr)
str_extract(tmp, "selectInput(")
str_extract(tmp, "selectInput\\(")
str_extract_all(tmp, "selectInput\\(")
str_extract_all(tmp, "selectInput\\(.*\\)")
str_extract_all(tmp, "selectInput\\(.*\\")")
)
str_extract_all(tmp, "selectInput\\(.*\")")
str_extract_all(tmp, "selectInput\\(.*\"")
str_extract_all(tmp, "selectInput\\(.*\",")
str_extract_all(tmp, "selectInput\\(.*,")
tmp2 = str_extract_all(tmp, "selectInput\\(.*\)")
tmp2 = str_extract_all(tmp, "selectInput\\(.*\\)")
tmp2
strsplit(tmp2[[1]][1], ",")
gsub("selectInput(","",strsplit(tmp2[[1]][1], ","))
gsub("selectInput\\(","",strsplit(tmp2[[1]][1], ","))
gsub("selectInput\\(","",strsplit(tmp2[[1]][1], ",")[[1]][1])
tmp3 = gsub("selectInput\\(","",strsplit(tmp2[[1]][1], ",")[[1]][1])
tmp3
str_extract("[a-zA-Z0-9]", tmp3)
str_extract(tmp3, "[a-zA-Z0-9]")
str_extract_all(tmp3, "[a-zA-Z0-9]")
strsplit(tmp, "selectInput\\(")
tmp3
gsub("\"","",tmp3)
print(sidebarPanel(
selectInput("id1","ID 1", choices = c("a", "b"), selected = "a"),
numericInput("id2", "ID 2", value = 2),
conditionalPanel("input.id1 == 'a'",
selectInput("id3", "ID 3", choices = c("x", "y"), selected = "x")
)
))
?quote
writeLines(sidebarPanel(
selectInput("id1","ID 1", choices = c("a", "b"), selected = "a"),
numericInput("id2", "ID 2", value = 2),
conditionalPanel("input.id1 == 'a'",
selectInput("id3", "ID 3", choices = c("x", "y"), selected = "x")
)
))
tmp = `sidebarPanel(
selectInput("id1","ID 1", choices = c("a", "b"), selected = "a"),
numericInput("id2", "ID 2", value = 2),
conditionalPanel("input.id1 == 'a'",
selectInput("id3", "ID 3", choices = c("x", "y"), selected = "x")
)
)`
readLines("ui.R")
paste(readLines("ui.R"), collapse = " ")
x = paste(readLines("ui.R"), collapse = " ")
uifn = "selectInput"
paste0(uifn, "\\(")
x2 = strsplit(x, paste0(uifn, "\\("))
x2
x2 = strsplit(x, paste0(uifn, "\\("))[[1]]
x2
x2 = strsplit(x, paste0(uifn, "\\("))[[1]][-1]
x2
sapply(x2, function(y) strsplit(x2, ","))
x2 = as.list(strsplit(x, paste0(uifn, "\\("))[[1]][-1])
x2
lapply(x2, function(y) strsplit(y, ","))
x2 = strsplit(x, paste0(uifn, "\\("))[[1]][-1]
lapply(x2, function(y) strsplit(y, ","))
sapply(x2, function(y) strsplit(y, ","))
sapply(x2, function(y) {
y2 = strsplit(y, ",")[1]
y3 = gsub("\"",y2)
return(y3)})
sapply(x2, function(y) {
y2 = strsplit(y, ",")[1]
y3 = gsub("\"","",y2)
return(y3)})
sapply(x2, function(y) {
y2 = strsplit(y, ",")[[1]][1]
y3 = gsub("\"","",y2)
return(y3)})
getid = function(y) {
y2 = strsplit(y, ",")[[1]][1]
y3 = gsub("\"","",y2)
return(y3)
}
x2
getid(x2[1])
getid(x2[2])
sapply(x2, getid)
lapply(x2, getid)
getuifnId = function(uistr, uifn) {
uistrsplit = strsplit(x, paste0(uifn, "\\("))[[1]][-1]
uifnid = rep(NA, length(uistrsplit))
for(i in 1:length(uistrsplit)) {
uifnid[i] = getid(uistrsplit[i])
}
return(uifnid)
}
getuifnId(x, "selectInput")
getuifnId(x, "numericInput")
x = paste(readLines("ui.R"), collapse = " ")
getuifnId(x, "numericInput")
getuifnId(x, "selectInput")
getuifnId(x, "sliderInput")
getid = function(x) {
id = strsplit(x, ",")[[1]][1]
idclean = gsub("\"","",id)
return(idclean)
}
getuifnId = function(uistr, uifn) {
uistrsplit = strsplit(x, paste0(uifn, "\\("))[[1]][-1]
uifnid = rep(NA, length(uistrsplit))
for(i in 1:length(uistrsplit)) {
uifnid[i] = getid(uistrsplit[i])
}
return(uifnid)
}
# tested with ui.R from
# http://shiny.rstudio.com/gallery/update-input-demo.html
x = paste(readLines("ui.R"), collapse = " ")
getuifnId(x, "sliderInput")
library(shiny); runApp('timevistestapp.R')
install.packages("vistime")
runApp('timevistestapp.R')
install.packages("readxl")
runApp('timevistestapp.R')
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(shiny); runApp('timevistestapp.R')
runApp('timevistestapp.R')
runApp('timevistestapp.R')
runApp('timevistestapp.R')
View(data)
runApp('timevistestapp.R')
runApp('timevistestapp.R')
runApp('timevistestapp.R')
runApp('timevistestapp.R')
vistime(data, events="event", groups="group", linewidth=4, showLabels = FALSE)
?as_data_pronoun
install.packages("rlang")
install.packages("rlang")
library(shiny); runApp('timevistestapp.R')
vistime(data, events="event", groups="group", linewidth=4, showLabels = FALSE)
getwd()
data = read.csv("HHTtimvis_gantt11.21.2018.csv", stringsAsFactors = FALSE)
data$start<-strptime(data$start, format="%m/%d/%Y") #have to convert to POSIXlt before coverting to date
data$end<-strptime(data$end, format="%m/%d/%Y")
data$start<-as.Date(data$start, format="%m%d%Y") #data are reading as NA after this command (if the above step is excluded), see previous step
data$end<-as.Date(data$end, format="%m%d%Y")
vistime(data, events="event", groups="group", linewidth=4, showLabels = FALSE)
install.packages("dplyr")
install.packages("dplyr")
library(vistime)
data = read.csv("HHTtimvis_gantt11.21.2018.csv", stringsAsFactors = FALSE)
data$start<-strptime(data$start, format="%m/%d/%Y") #have to convert to POSIXlt before coverting to date
data$end<-strptime(data$end, format="%m/%d/%Y")
data$start<-as.Date(data$start, format="%m%d%Y") #data are reading as NA after this command (if the above step is excluded), see previous step
data$end<-as.Date(data$end, format="%m%d%Y")
vistime(data, events="event", groups="group", linewidth=4, showLabels = FALSE)
library(shiny); runApp('timevistestapp.R')
runApp('timevistestapp.R')
